"""
Reflectivity plugin for fitting GUI.

Note that the fitting infrastructure is still heavily tied to the reflectivity
modeling program, and this represents only the first tiny steps to separating
the two.
"""

__all__ = ["data_view", "model_view", "new_model", "calc_errors", "show_errors"]

from typing import cast
import numpy as np

from bumps.fitproblem import FitProblem
from ..experiment import Experiment
from ..sample.materialdb import air, silicon
from ..probe.data_loaders import ncnrdata as NCNR

# List of modules that contain dataclasses for the saved json file format


def load_model(filename: str):
    # TODO: bumps plugin api needs to allow options for loader
    options = None
    if filename.endswith(".staj") or filename.endswith(".sta"):
        from ..probe.data_loaders.stajconvert import load_mlayer

        return FitProblem[Experiment](load_mlayer(filename))
        # fit_all(problem.fitness, pmp=20)
    elif filename.endswith(".json"):
        from bumps.serialize import load_file

        return cast(FitProblem[Experiment], load_file(filename))
    else:
        return None


def save_json(problem, basename):
    from bumps.serialize import save

    json_filename = basename + "-expt.json"
    save(json_filename, problem)


def new_model():
    stack = silicon(0, 10) | air
    instrument = NCNR.NG1()
    probe = instrument.probe(T=np.linspace(0, 5, 200), Tlo=0.2, slits_at_Tlo=2)
    M = Experiment(sample=stack, probe=probe)
    problem = FitProblem(M)
    return problem


def errplot(problem: FitProblem[Experiment], points: np.ndarray, ax=None, **kwargs):
    """
    Show the model confidence intervals.

    *problem* is the FitProblem containing the model and data.
    *points* is a set of points in the parameter space, typically
    sampled from the MCMC state or generated by a sampling method.
    *ax* is an optional matplotlib Axes object to plot on.
    """
    from ..uncertainty import calc_errors, show_errors

    errs = calc_errors(problem, points)

    if errs is not None:
        if ax is None:
            import matplotlib.pyplot as plt

            ax = plt.gca()
        show_errors(problem, errs, ax=ax, **kwargs)
