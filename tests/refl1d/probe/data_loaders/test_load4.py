# standard imports
from collections import namedtuple

# third-party imports
import numpy as np
from orsopy.fileio.orso import load_orso, save_nexus
import pytest

# refl1d imports
from refl1d.probe.data_loaders.load4 import parse_orso


OrsoFiles = namedtuple("OrsoFiles", ["ort", "orb"])


@pytest.fixture
def orsofiles(tmp_path):
    """
    Pytest fixture to create temporary ORSO files for testing.

    This fixture creates two temporary files: one with a `.ort` extension and one with a `.orb` extension.
    The `.ort` file is written with a sample ORSO entry, and the `.orb` file is generated by converting the `.ort` file
    using the `save_nexus` function from the `orsopy.fileio.orso` module. The paths to these files are yielded as a
    namedtuple `OrsoFiles` containing `ort` and `orb` attributes.

    Yields
    ------
    OrsoFiles
        A namedtuple containing the paths to the temporary `.ort` and `.orb` files.
    """

    entry = """# # ORSO reflectivity data file | 1.0 standard | YAML encoding | https://www.reflectometry.org/
# data_source:
#   owner:
#     name: Artur Glavic
#     affiliation: null
#     contact: b''
#   experiment:
#     title: Structural evolution of the CO2/Water interface
#     instrument: Amor
#     start_date: 2023-11-29T10:12:45
#     probe: neutron
#     facility: SINQ@PSI
#     proposalID: '20230368'
#   sample:
#     name: prist4
#     sample_parameters:
#       tempMean: {magnitude: -9999.0}
#     model:
#       stack: vacuum | Al2O3 2 | Ti0.27Co0.73 9.3 | Si
#   measurement:
#     instrument_settings:
#       incident_angle: {magnitude: 0.08, error: 0.01, unit: deg}
#       wavelength: {magnitude: 7.5, error: 4.5, unit: angstrom}
#       polarization: pp
#     data_files:
#     - file: raw/amor2023n000848.hdf
#       timestamp: 2023-11-29T10:12:45
#       amor_monitor: 1792.443302905
#     scheme: angle- and energy-dispersive
#     references: []
#     amor_monitor: 1792.443302905
# reduction:
#   software: {name: eos, version: '2.0'}
#   timestamp: 2023-11-29T10:57:48.480339
#   computer: amor.psi.ch
#   call: eos.py -a 0.04 -F 0.0093,0.0101 -n 848 prist5_10K_m_025
# data_set: 0
# columns:
# - {name: Qz, unit: 1/angstrom, physical_quantity: normal momentum transfer}
# - {name: R, unit: '', physical_quantity: specular reflectivity}
# - {error_of: R, error_type: uncertainty, value_is: sigma}
# - {error_of: Qz, error_type: resolution, value_is: sigma}
# # Qz (1/angstrom)    R ()                   sR                     sQz
2.1999999999999997e-03 4.7241193897215048e-03 4.7241193897215048e-03 1.9999999999999987e-04
2.5999999999999999e-03 0.0000000000000000e+00 0.0000000000000000e+00 2.0000000000000009e-04
3.0000000000000001e-03 4.9441079014990305e-03 2.8632759811688313e-03 2.0000000000000009e-04
3.4000000000000002e-03 5.3957146642147798e-03 2.7033018099334193e-03 1.9999999999999987e-04
3.8000000000000000e-03 1.1948517768746966e-02 3.7903477990210636e-03 2.0000000000000009e-04
4.2000000000000006e-03 1.6302332669940297e-02 3.9723175648453228e-03 2.0000000000000009e-04
4.5999999999999999e-03 2.2652164871650581e-02 4.5763672802481776e-03 2.0000000000000009e-04
5.0000000000000001e-03 2.3020814468949415e-02 4.2537271133726200e-03 1.9999999999999966e-04
5.4000000000000003e-03 2.7305557750665344e-02 4.4287009711273589e-03 2.0000000000000009e-04
5.7999999999999996e-03 1.9457945835850306e-02 3.7817426451169783e-03 2.0000000000000009e-04
6.2000000000000006e-03 2.7645506109865266e-02 4.2679939914090732e-03 2.0000000000000009e-04
6.6000000000000000e-03 2.4223034347324195e-02 3.7655052701117517e-03 2.0000000000000009e-04
7.0000000000000001e-03 2.8408308819418325e-02 3.7377941755602716e-03 1.9999999999999966e-04
7.4000000000000003e-03 5.7460495308053604e-02 5.2154049057105455e-03 2.0000000000000009e-04
7.7999999999999996e-03 1.4898833519509819e-01 7.5478984035617898e-03 2.0000000000000009e-04
8.1999999999999990e-03 3.5204809294430212e-01 1.1146891694516669e-02 1.9999999999999966e-04
8.6000000000000000e-03 5.3176577607895481e-01 1.3517251795319620e-02 1.9999999999999966e-04
"""
    ort_file = tmp_path / "test.ort"
    ort_file.write_text(entry)
    ort_file_path = str(ort_file)
    orb_file_path = str(tmp_path / "test.orb")
    save_nexus(load_orso(ort_file_path), orb_file_path)
    yield OrsoFiles(ort=ort_file_path, orb=orb_file_path)


def test_parse_orso(orsofiles):
    ortset = parse_orso(orsofiles.ort)

    # Check the length of the sets
    assert len(ortset) == 1

    # Check the structure of the first entry
    header, data = ortset[0]

    # Check the header dictionary
    assert isinstance(header, dict)
    assert header["polarization"] == "++"
    header_values = {
        "angle": 0.08,
        "angular_resolution": 0.01,
        "wavelength": 7.5,
        "wavelength_resolution": 4.5,
    }
    for key, value in header_values.items():
        assert key in header
        assert np.isclose(header[key], value)

    # Check the data array
    assert isinstance(data, np.ndarray)
    assert data.shape == (4, 17)

    # Check that parse_orso returns the same data for both ort and orb files
    orbset = parse_orso(orsofiles.orb)
    header_other, data_other = orbset[0]
    assert header == header_other
    assert np.allclose(data, data_other)
