# -*- coding: utf-8 -*-
"""
Created on Mon Sep 15 21:08:34 2014

@author: Richard Sheridan

These tests were generated using the code as of 4/15/17.
No guarantee is made regarding absolute correctness, only that the results
haven't changed since that version.
"""

import numpy as np

from refl1d.names import Material
from refl1d.sample.polymer import (
    EndTetheredPolymer,
    PolymerBrush,
    PolymerMushroom,
    Propagator,
    SCFcache,
    SCFeqns,
    SCFprofile,
    SCFsolve,
    SZdist,
)


def check(a, b, atol=1e-14, rtol=1e-8):
    if not np.allclose(a, b, atol=atol, rtol=rtol):
        atol = np.max(abs(a - b))
        rtol = np.max(abs(a - b) / (abs(b) + (b == 0.0)))
        raise AssertionError("atol=%.2e and rtol=%.2e for\na=%s,\nb=%s" % (atol, rtol, str(a), str(b)))


g_zs_data = np.array(
    (
        (
            0.90000000,
            0.67833333,
            0.53457407,
            0.43538321,
            0.36346252,
            0.30925318,
            0.26714431,
            0.23365571,
            0.20652162,
            0.18420452,
            0.16562391,
            0.14999788,
            0.13674637,
            0.12542991,
            0.11570948,
            0.10731936,
            0.10004837,
            0.0937266,
            0.08821584,
            0.08340252,
        ),
        (
            0.92222222,
            0.85049383,
            0.76425846,
            0.68155058,
            0.60783778,
            0.54394935,
            0.4891275,
            0.44218798,
            0.40194363,
            0.36734135,
            0.33749022,
            0.31165092,
            0.28921394,
            0.26967689,
            0.25262446,
            0.23771168,
            0.22465053,
            0.21319918,
            0.20315348,
            0.19434016,
        ),
        (
            0.94444444,
            0.89197531,
            0.84257659,
            0.7930217,
            0.74413393,
            0.69722471,
            0.65323138,
            0.61264733,
            0.57563553,
            0.54214957,
            0.5120236,
            0.4850313,
            0.46092225,
            0.43944331,
            0.42035059,
            0.4034157,
            0.38842854,
            0.37519809,
            0.36355202,
            0.3533357,
        ),
        (
            0.96666667,
            0.93444444,
            0.90345542,
            0.87380169,
            0.84505407,
            0.81709233,
            0.79005942,
            0.76420135,
            0.73975859,
            0.71691616,
            0.69579069,
            0.67643584,
            0.65885458,
            0.64301244,
            0.62884938,
            0.61628918,
            0.6052467,
            0.59563309,
            0.58735937,
            0.58033893,
        ),
        (
            0.98888889,
            0.97790123,
            0.96719845,
            0.95693471,
            0.94725739,
            0.93822305,
            0.92984965,
            0.92215235,
            0.91515455,
            0.90888661,
            0.90338093,
            0.89866754,
            0.89477117,
            0.89170994,
            0.88949506,
            0.88813126,
            0.8876176,
            0.88794842,
            0.88911423,
            0.89110265,
        ),
        (
            1.01111111,
            1.02234568,
            1.03387151,
            1.04586384,
            1.05850568,
            1.07179988,
            1.08562363,
            1.09981238,
            1.11421611,
            1.12872507,
            1.14327513,
            1.1578427,
            1.17243568,
            1.18708411,
            1.20183196,
            1.2167308,
            1.23183506,
            1.24719889,
            1.26287398,
            1.27890843,
        ),
        (
            1.03333333,
            1.06777778,
            1.10354047,
            1.14085245,
            1.17885107,
            1.21673962,
            1.25401498,
            1.29043,
            1.32591,
            1.36048312,
            1.39423345,
            1.42727231,
            1.45972146,
            1.49170372,
            1.52333786,
            1.55473604,
            1.58600256,
            1.6172335,
            1.64851681,
            1.67993261,
        ),
        (
            1.05555556,
            1.11419753,
            1.17627115,
            1.23566805,
            1.29102979,
            1.34261892,
            1.39113583,
            1.43729989,
            1.48172328,
            1.52489154,
            1.56717868,
            1.60887008,
            1.65018392,
            1.69128862,
            1.7323162,
            1.77337216,
            1.81454277,
            1.85590018,
            1.8975062,
            1.93941493,
        ),
        (
            1.07777778,
            1.16160494,
            1.21517227,
            1.25496048,
            1.28875838,
            1.32029364,
            1.35135685,
            1.38279751,
            1.41500143,
            1.44812428,
            1.48220808,
            1.51724019,
            1.55318343,
            1.58999174,
            1.62761807,
            1.66601842,
            1.70515369,
            1.74499047,
            1.78550116,
            1.82666377,
        ),
        (
            1.1,
            1.00425926,
            0.9494177,
            0.91902123,
            0.90402499,
            0.89922403,
            0.90148479,
            0.9088376,
            0.91999378,
            0.93407904,
            0.95048074,
            0.96875736,
            0.98858277,
            1.00971099,
            1.03195321,
            1.05516234,
            1.07922242,
            1.10404129,
            1.1295452,
            1.15567502,
        ),
    )
)

g_zs_ta_data = np.array(
    (
        (
            9.00000000e-01,
            5.40000000e-01,
            3.44750000e-01,
            2.32057407e-01,
            1.63182762e-01,
            1.18909613e-01,
            8.91942729e-02,
            6.85112896e-02,
            5.36702862e-02,
            4.27458873e-02,
            3.45293323e-02,
            2.82349142e-02,
            2.33361729e-02,
            1.94708968e-02,
            1.63840546e-02,
            1.38924051e-02,
            1.18619166e-02,
            1.01929871e-02,
            8.81054699e-03,
            7.65729535e-03,
        ),
        (
            0.00000000e00,
            1.38333333e-01,
            1.68049383e-01,
            1.59655453e-01,
            1.39999701e-01,
            1.18990036e-01,
            9.99648391e-02,
            8.37567498e-02,
            7.02914374e-02,
            5.92119992e-02,
            5.01154320e-02,
            4.26348293e-02,
            3.64612874e-02,
            3.13434433e-02,
            2.70798154e-02,
            2.35098237e-02,
            2.05055808e-02,
            1.79650316e-02,
            1.58064477e-02,
            1.39640932e-02,
        ),
        (
            0.00000000e00,
            0.00000000e00,
            2.17746914e-02,
            4.01622085e-02,
            5.09704753e-02,
            5.55038957e-02,
            5.58698032e-02,
            5.37794965e-02,
            5.03986580e-02,
            4.64583240e-02,
            4.23921664e-02,
            3.84437829e-02,
            3.47398749e-02,
            3.13372615e-02,
            2.82521634e-02,
            2.54781029e-02,
            2.29966886e-02,
            2.07840162e-02,
            1.88143888e-02,
            1.70624124e-02,
        ),
        (
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            3.50814472e-03,
            8.73138241e-03,
            1.39319543e-02,
            1.82139259e-02,
            2.13049739e-02,
            2.32609305e-02,
            2.42696439e-02,
            2.45469939e-02,
            2.42904207e-02,
            2.36629921e-02,
            2.27918432e-02,
            2.17724199e-02,
            2.06743749e-02,
            1.95472967e-02,
            1.84256090e-02,
            1.73324995e-02,
            1.62829586e-02,
        ),
        (
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            5.78194222e-04,
            1.82024107e-03,
            3.51226222e-03,
            5.37879716e-03,
            7.19678933e-03,
            8.82375170e-03,
            1.01879864e-02,
            1.12682785e-02,
            1.20747695e-02,
            1.26345241e-02,
            1.29818629e-02,
            1.31524460e-02,
            1.31799736e-02,
            1.30945794e-02,
            1.29222527e-02,
            1.26848446e-02,
        ),
        (
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            9.74364337e-05,
            3.72423702e-04,
            8.45750250e-04,
            1.48928204e-03,
            2.25009829e-03,
            3.07039056e-03,
            3.89911195e-03,
            4.69684009e-03,
            5.43641967e-03,
            6.10148618e-03,
            6.68422006e-03,
            7.18306621e-03,
            7.60075285e-03,
            7.94271547e-03,
            8.21591641e-03,
        ),
        (
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            1.67807191e-05,
            7.56996886e-05,
            1.98314090e-04,
            3.95755195e-04,
            6.68038713e-04,
            1.00663252e-03,
            1.39794287e-03,
            1.82641850e-03,
            2.27679495e-03,
            2.73546224e-03,
            3.19113019e-03,
            3.63500643e-03,
            4.06067510e-03,
            4.46381663e-03,
        ),
        (
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            2.95216355e-06,
            1.53949862e-05,
            4.58153916e-05,
            1.02417597e-04,
            1.91445606e-04,
            3.16399051e-04,
            4.78006078e-04,
            6.74663168e-04,
            9.03073979e-04,
            1.15890201e-03,
            1.43733487e-03,
            1.73351944e-03,
            2.04286531e-03,
        ),
        (
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            5.30296046e-07,
            3.14642320e-06,
            1.05080289e-05,
            2.60638735e-05,
            5.35481090e-05,
            9.64846722e-05,
            1.57814991e-04,
            2.39684868e-04,
            3.43375784e-04,
            4.69343535e-04,
            6.17323631e-04,
            7.86469082e-04,
        ),
        (
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            0.00000000e00,
            9.72209417e-08,
            6.48139611e-07,
            2.40177435e-06,
            6.53967800e-06,
            1.46129172e-05,
            2.84049958e-05,
            4.97630787e-05,
            8.04351502e-05,
            1.21938004e-04,
            1.75467518e-04,
            2.41852179e-04,
        ),
    )
)


def calc_g_zs_ta_test():
    layers = 10
    segments = 20
    g_z = np.linspace(0.9, 1.1, layers)
    g_zs = Propagator(g_z, segments)
    check(g_zs.ta(), g_zs_ta_data)


def calc_g_zs_ngts_u_test():
    layers = 10
    segments = 20
    g_z = np.linspace(0.9, 1.1, layers)
    c = 1.0
    g_zs = Propagator(g_z, segments)
    check(g_zs.ngts_u(c), g_zs_data, rtol=1e-7)


def calc_g_zs_ngts_test():
    layers = 10
    segments = 20
    g_z = np.linspace(0.9, 1.1, layers)
    c_i = np.zeros(segments)
    c_i[-1] = 1.0
    g_zs = Propagator(g_z, segments)
    check(g_zs.ngts(c_i), g_zs_data, rtol=1e-7)


def calc_g_zs_free_test():
    layers = 10
    segments = 20
    g_z = np.linspace(0.9, 1.1, layers)
    g_zs = Propagator(g_z, segments)
    check(g_zs.free(), g_zs_data, rtol=1e-7)


def SZdist_test():
    # uniform
    pdi = 1
    nn = 100
    data = np.array(
        (
            (
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                0.0,
                1.0,
            )
        )
    )
    check(SZdist(pdi, nn), data)

    # too narrow
    pdi = 1.0000000001
    nn = 100
    check(SZdist(pdi, nn), data)

    # broad
    pdi = 2
    nn = 30
    data = np.array(
        (
            3.27848972e-02,
            3.17100805e-02,
            3.06705004e-02,
            2.96650018e-02,
            2.86924673e-02,
            2.77518164e-02,
            2.68420036e-02,
            2.59620181e-02,
            2.51108819e-02,
            2.42876492e-02,
            2.34914054e-02,
            2.27212655e-02,
            2.19763738e-02,
            2.12559026e-02,
            2.05590512e-02,
            1.98850454e-02,
            1.92331360e-02,
            1.86025988e-02,
            1.79927331e-02,
            1.74028611e-02,
            1.68323275e-02,
            1.62804982e-02,
            1.57467599e-02,
            1.52305197e-02,
            1.47312039e-02,
            1.42482576e-02,
            1.37811442e-02,
            1.33293445e-02,
            1.28923566e-02,
            1.24696949e-02,
            1.20608897e-02,
            1.16654867e-02,
            1.12830465e-02,
            1.09131443e-02,
            1.05553688e-02,
            1.02093227e-02,
            9.87462129e-03,
            9.55089270e-03,
            9.23777719e-03,
            8.93492683e-03,
            8.64200509e-03,
            8.35868646e-03,
            8.08465612e-03,
            7.81960957e-03,
            7.56325228e-03,
            7.31529937e-03,
            7.07547533e-03,
            6.84351366e-03,
            6.61915660e-03,
            6.40215483e-03,
            6.19226723e-03,
            5.98926056e-03,
            5.79290925e-03,
            5.60299509e-03,
            5.41930706e-03,
            5.24164105e-03,
            5.06979961e-03,
            4.90359181e-03,
            4.74283295e-03,
            4.58734439e-03,
            4.43695335e-03,
            4.29149272e-03,
            4.15080086e-03,
            4.01472142e-03,
            3.88310319e-03,
            3.75579993e-03,
            3.63267016e-03,
            3.51357707e-03,
            3.39838831e-03,
            3.28697589e-03,
            3.17921600e-03,
            3.07498890e-03,
            2.97417878e-03,
            2.87667360e-03,
            2.78236502e-03,
            2.69114825e-03,
            2.60292191e-03,
            2.51758798e-03,
            2.43505163e-03,
            2.35522114e-03,
            2.27800781e-03,
            2.20332583e-03,
            2.13109222e-03,
            2.06122670e-03,
            1.99365165e-03,
            1.92829198e-03,
            1.86507505e-03,
            1.80393062e-03,
            1.74479074e-03,
            1.68758969e-03,
            1.63226392e-03,
            1.57875194e-03,
            1.52699430e-03,
            1.47693347e-03,
            1.42851383e-03,
            1.38168158e-03,
            1.33638467e-03,
            1.29257277e-03,
            1.25019719e-03,
            1.20921085e-03,
            1.16956821e-03,
            1.13122520e-03,
            1.09413923e-03,
            1.05826908e-03,
            1.02357489e-03,
            9.90018113e-04,
            9.57561458e-04,
            9.26168860e-04,
            8.95805433e-04,
            8.66437437e-04,
            8.38032240e-04,
            8.10558275e-04,
            7.83985014e-04,
            7.58282928e-04,
            7.33423457e-04,
            7.09378976e-04,
            6.86122767e-04,
            6.63628987e-04,
            6.41872641e-04,
            6.20829553e-04,
            6.00476339e-04,
            5.80790383e-04,
            5.61749809e-04,
            5.43333460e-04,
            5.25520871e-04,
            5.08292247e-04,
            4.91628445e-04,
            4.75510948e-04,
            4.59921844e-04,
            4.44843813e-04,
            4.30260098e-04,
            4.16154494e-04,
            4.02511327e-04,
            3.89315436e-04,
            3.76552158e-04,
            3.64207310e-04,
            3.52267174e-04,
            3.40718482e-04,
            3.29548402e-04,
            3.18744520e-04,
            3.08294832e-04,
            2.98187725e-04,
            2.88411969e-04,
            2.78956700e-04,
            2.69811411e-04,
            2.60965941e-04,
            2.52410460e-04,
            2.44135461e-04,
            2.36131748e-04,
            2.28390429e-04,
            2.20902900e-04,
            2.13660842e-04,
            2.06656206e-04,
            1.99881210e-04,
            1.93328324e-04,
            1.86990268e-04,
            1.80859998e-04,
            1.74930702e-04,
            1.69195791e-04,
            1.63648893e-04,
            1.58283844e-04,
            1.53094683e-04,
            1.48075642e-04,
            1.43221145e-04,
            1.38525797e-04,
            1.33984382e-04,
            1.29591851e-04,
            1.25343325e-04,
            1.21234082e-04,
            1.17259556e-04,
            1.13415331e-04,
            1.09697134e-04,
            1.06100834e-04,
            1.02622435e-04,
            9.92580712e-05,
            9.60040046e-05,
            9.28566190e-05,
            8.98124169e-05,
            8.68680156e-05,
            8.40201433e-05,
            8.12656354e-05,
            7.86014310e-05,
            7.60245696e-05,
            7.35321877e-05,
            7.11215159e-05,
            6.87898752e-05,
            6.65346749e-05,
            6.43534088e-05,
            6.22436531e-05,
            6.02030634e-05,
            5.82293722e-05,
            5.63203864e-05,
            5.44739845e-05,
            5.26881148e-05,
            5.09607930e-05,
            4.92900995e-05,
            4.76741778e-05,
            4.61112323e-05,
            4.45995263e-05,
            4.31373799e-05,
            4.17231684e-05,
            4.03553202e-05,
            3.90323155e-05,
            3.77526840e-05,
            3.65150038e-05,
            3.53178996e-05,
            3.41600411e-05,
            3.30401417e-05,
            3.19569570e-05,
            3.09092834e-05,
            2.98959565e-05,
            2.89158505e-05,
            2.79678762e-05,
            2.70509801e-05,
            2.61641435e-05,
            2.53063809e-05,
            2.44767390e-05,
            2.36742961e-05,
            2.28981603e-05,
            2.21474693e-05,
            2.14213889e-05,
            2.07191123e-05,
            2.00398590e-05,
            1.93828742e-05,
            1.87474280e-05,
            1.81328142e-05,
            1.75383499e-05,
            1.69633744e-05,
            1.64072488e-05,
            1.58693552e-05,
            1.53490959e-05,
            1.48458927e-05,
            1.43591864e-05,
            1.38884363e-05,
            1.34331192e-05,
            1.29927292e-05,
            1.25667768e-05,
            1.21547889e-05,
            1.17563075e-05,
            1.13708899e-05,
            1.09981078e-05,
            1.06375469e-05,
            1.02888067e-05,
            9.95149945e-06,
            9.62525049e-06,
            9.30969725e-06,
            9.00448907e-06,
            8.70928680e-06,
            8.42376242e-06,
            8.14759864e-06,
            7.88048858e-06,
            7.62213544e-06,
            7.37225212e-06,
            7.13056094e-06,
            6.89679335e-06,
            6.67068957e-06,
            6.45199835e-06,
            6.24047669e-06,
            6.03588953e-06,
            5.83800953e-06,
            5.64661681e-06,
            5.46149870e-06,
            5.28244947e-06,
            5.10927018e-06,
            4.94176838e-06,
            4.77975794e-06,
            4.62305884e-06,
            4.47149694e-06,
            4.32490383e-06,
            4.18311662e-06,
            4.04597775e-06,
            3.91333482e-06,
            3.78504044e-06,
            3.66095206e-06,
            3.54093177e-06,
            3.42484622e-06,
            3.31256641e-06,
            3.20396756e-06,
            3.09892901e-06,
            2.99733403e-06,
            2.89906974e-06,
            2.80402693e-06,
            2.71209999e-06,
            2.62318678e-06,
            2.53718848e-06,
            2.45400955e-06,
            2.37355755e-06,
            2.29574308e-06,
            2.22047967e-06,
            2.14768368e-06,
            2.07727424e-06,
            2.00917309e-06,
            1.94330456e-06,
            1.87959546e-06,
            1.81797499e-06,
            1.75837468e-06,
            1.70072830e-06,
            1.64497180e-06,
            1.59104321e-06,
            1.53888260e-06,
            1.48843203e-06,
            1.43963543e-06,
            1.39243856e-06,
            1.34678900e-06,
            1.30263600e-06,
            1.25993051e-06,
            1.21862508e-06,
            1.17867380e-06,
            1.14003227e-06,
            1.10265757e-06,
            1.06650815e-06,
            1.03154386e-06,
        )
    )
    check(SZdist(pdi, nn), data)


easy_phi_z = np.array(
    (
        3.65555778e-01,
        3.97530942e-01,
        3.95177593e-01,
        3.88755392e-01,
        3.80784804e-01,
        3.72128254e-01,
        3.63090353e-01,
        3.53797489e-01,
        3.44313620e-01,
        3.34678411e-01,
        3.24920384e-01,
        3.15062002e-01,
        3.05122091e-01,
        2.95117245e-01,
        2.85062724e-01,
        2.74973026e-01,
        2.64862253e-01,
        2.54744317e-01,
        2.44633057e-01,
        2.34542304e-01,
        2.24485900e-01,
        2.14477710e-01,
        2.04531625e-01,
        1.94661559e-01,
        1.84881453e-01,
        1.75205269e-01,
        1.65646998e-01,
        1.56220661e-01,
        1.46940309e-01,
        1.37820027e-01,
        1.28873934e-01,
        1.20116183e-01,
        1.11560959e-01,
        1.03222487e-01,
        9.51150272e-02,
        8.72528915e-02,
        7.96504609e-02,
        7.23222205e-02,
        6.52828140e-02,
        5.85471226e-02,
        5.21303666e-02,
        4.60482169e-02,
        4.03168798e-02,
        3.49530831e-02,
        2.99738486e-02,
        2.53958999e-02,
        2.12345582e-02,
        1.75020558e-02,
        1.42053630e-02,
        1.13438569e-02,
        8.90736329e-03,
        6.87516042e-03,
        5.21636994e-03,
        3.89180122e-03,
        2.85690535e-03,
        2.06521082e-03,
        1.47156065e-03,
        1.03463569e-03,
        7.18524401e-04,
        4.93361836e-04,
        3.35231541e-04,
        2.25588058e-04,
        1.50440247e-04,
        9.94770155e-05,
        6.52498334e-05,
        4.24697365e-05,
        2.74367658e-05,
        1.75962019e-05,
        1.12044893e-05,
        6.43768632e-07,
        3.90023255e-07,
        2.34559779e-07,
        1.40008161e-07,
        8.29272726e-08,
        4.87244589e-08,
        2.83845206e-08,
        1.63805733e-08,
        9.35038310e-09,
        5.26436221e-09,
        2.90675760e-09,
        1.55475537e-09,
        7.81883338e-10,
        3.39857917e-10,
        9.31247294e-11,
    )
)


def SCFeqns_test():
    # away from solution
    phi_z = np.linspace(0.5, 0, 50)
    chi = 0.1
    chi_s = 0.05
    sigma = 0.1
    navgsegments = 95.5
    pdi = 1.2
    p_i = SZdist(pdi, navgsegments)
    data = np.array(
        (
            0.24809791,
            0.19944421,
            0.16973004,
            0.14729207,
            0.13005919,
            0.11657451,
            0.1058576,
            0.09727039,
            0.09038682,
            0.08490298,
            0.08058535,
            0.07724325,
            0.07471421,
            0.07285592,
            0.07154151,
            0.07065667,
            0.0700978,
            0.06977082,
            0.0695903,
            0.06947884,
            0.0693665,
            0.06919036,
            0.06889397,
            0.06842689,
            0.06774423,
            0.06680614,
            0.06557737,
            0.06402683,
            0.0621272,
            0.05985452,
            0.05718783,
            0.05410874,
            0.05060095,
            0.0466496,
            0.04224034,
            0.037358,
            0.03198467,
            0.02609722,
            0.01966451,
            0.01264599,
            0.00499654,
            -0.00331032,
            -0.01221627,
            -0.02143066,
            -0.03017221,
            -0.0368608,
            -0.0390676,
            -0.03438821,
            -0.02291077,
            -0.01063797,
        )
    )
    result = SCFeqns(phi_z, chi, chi_s, sigma, navgsegments, p_i)
    check(result, data, rtol=2e-6)

    # at solution
    phi_z = easy_phi_z.copy()
    data = np.array(
        (
            -9.29275601e-10,
            -5.71888092e-11,
            -6.36132924e-10,
            -1.55644492e-09,
            -1.13562165e-09,
            -9.72811443e-10,
            -1.63384295e-09,
            -1.18849514e-09,
            -2.89755997e-10,
            -7.75140563e-10,
            -1.77285464e-10,
            9.26357491e-10,
            1.16035537e-09,
            1.35558342e-10,
            3.92842869e-10,
            -1.16742438e-09,
            -1.13646220e-09,
            1.31389510e-10,
            -7.78504983e-10,
            -1.16462257e-10,
            1.06623532e-09,
            1.31860881e-09,
            1.29663683e-09,
            1.62908659e-10,
            1.10570872e-09,
            1.12047058e-09,
            2.64739120e-10,
            -9.46467349e-11,
            -7.11506659e-10,
            -1.17296972e-09,
            -1.00791650e-09,
            -1.64910530e-10,
            -1.19973027e-09,
            -6.62134042e-10,
            -6.10394263e-10,
            -6.62704530e-10,
            -7.97200791e-10,
            -9.37733571e-10,
            -1.10498946e-09,
            -1.24565040e-09,
            -1.41609789e-09,
            -1.67821481e-09,
            -2.02143809e-09,
            -2.48336908e-09,
            -2.98173400e-09,
            -3.44456770e-09,
            -3.97225693e-09,
            -4.38723307e-09,
            -4.62610414e-09,
            -4.77197874e-09,
            -4.73971093e-09,
            -4.48724133e-09,
            -4.05071319e-09,
            -3.46513582e-09,
            -2.77379160e-09,
            -2.04575741e-09,
            -1.32608356e-09,
            -6.40953530e-10,
            -2.51873555e-11,
            5.10576483e-10,
            9.60606714e-10,
            1.32984397e-09,
            1.62342470e-09,
            1.85145266e-09,
            2.02196043e-09,
            2.14281230e-09,
            2.21889979e-09,
            2.25142468e-09,
            2.23470713e-09,
            -6.43817608e-06,
            -4.05512658e-06,
            -2.53549899e-06,
            -1.57360459e-06,
            -9.69199656e-07,
            -5.92195683e-07,
            -3.58754495e-07,
            -2.15266255e-07,
            -1.27713614e-07,
            -7.46744540e-08,
            -4.27578070e-08,
            -2.36527590e-08,
            -1.22420735e-08,
            -5.42986558e-09,
            -1.49766885e-09,
        )
    )
    result = SCFeqns(phi_z, chi, chi_s, sigma, navgsegments, p_i)
    check(result, data)

    # TODO: check float overflow handling


def SCFsolve_test():
    try:
        from scipy.optimize import NoConvergence
    except ImportError:
        # cruft from scipy < 1.14, hard breaking change with no warning
        from scipy.optimize.nonlin import NoConvergence
    # find the solution used in the previous test without an initial guess
    chi = 0.1
    chi_s = 0.05
    sigma = 0.1
    navgsegments = 95.5
    pdi = 1.2
    data = easy_phi_z.copy()
    result = SCFsolve(chi, chi_s, pdi, sigma, 0, navgsegments)
    check(result, data)

    # try a very hard one using the answer as an initial guess
    chi = 1
    chi_s = 0.5
    try:
        SCFsolve(chi, chi_s, pdi, sigma, 0, navgsegments)
        assert False, "should not arrive here"
    except NoConvergence:
        pass

    phi0 = np.array(
        (
            7.68622748e-01,
            7.38403430e-01,
            7.24406743e-01,
            7.18854113e-01,
            7.13805025e-01,
            7.08721605e-01,
            7.03592422e-01,
            6.98483104e-01,
            6.93373096e-01,
            6.87807938e-01,
            6.79307808e-01,
            6.56674507e-01,
            5.77590583e-01,
            3.58036148e-01,
            1.00802863e-01,
            1.68381666e-02,
            2.86654637e-03,
            6.37708606e-04,
            1.74095080e-04,
            5.19490850e-05,
            1.59662700e-05,
            4.94738039e-06,
            1.53508370e-06,
            4.75950448e-07,
            1.47353950e-07,
        )
    )
    data = np.array(
        (
            7.68624312e-01,
            7.38405145e-01,
            7.24408672e-01,
            7.18856081e-01,
            7.13806986e-01,
            7.08723539e-01,
            7.03594317e-01,
            6.98484957e-01,
            6.93374957e-01,
            6.87810110e-01,
            6.79311773e-01,
            6.56686588e-01,
            5.77631688e-01,
            3.58123600e-01,
            1.00850801e-01,
            1.68473427e-02,
            2.86793845e-03,
            6.37969700e-04,
            1.74159405e-04,
            5.19674959e-05,
            1.59718087e-05,
            4.94903452e-06,
            1.53553770e-06,
            4.76031362e-07,
            1.47318752e-07,
            4.54628391e-08,
            1.39474490e-08,
            4.20912796e-09,
            1.19874994e-09,
            2.57686731e-10,
        )
    )
    result = SCFsolve(chi, chi_s, pdi, sigma, 0, navgsegments, False, phi0)
    check(result, data)


def SCFcache_test():
    # check that the hard solution can be found by walking
    chi = 1
    chi_s = 0.5
    sigma = 0.1
    navgsegments = 95.5
    pdi = 1.2
    try:
        from collections import OrderedDict

        flag = True
    except ImportError:

        class OrderedDict(dict):
            def popitem(self, *args, **kw):
                return dict.popitem(self, *args)

        flag = False
    cache = OrderedDict()
    data = np.array(
        (
            7.68624312e-01,
            7.38405144e-01,
            7.24408672e-01,
            7.18856081e-01,
            7.13806986e-01,
            7.08723539e-01,
            7.03594316e-01,
            6.98484957e-01,
            6.93374956e-01,
            6.87810110e-01,
            6.79311773e-01,
            6.56686588e-01,
            5.77631687e-01,
            3.58123600e-01,
            1.00850800e-01,
            1.68473428e-02,
            2.86793856e-03,
            6.37969824e-04,
            4.76157373e-07,
            1.47444834e-07,
            4.55891551e-08,
            1.40745232e-08,
            4.33861905e-09,
            1.33544647e-09,
            4.10461289e-10,
            1.25980468e-10,
            3.86130879e-11,
            1.18190193e-11,
            3.61292843e-12,
            1.10302092e-12,
            3.36331752e-13,
            1.02430581e-13,
            3.11588828e-14,
            9.46752077e-15,
            2.87340655e-15,
            8.71053350e-16,
            2.63682600e-16,
            7.96432707e-17,
            2.39335164e-17,
            7.08353585e-18,
            1.98293799e-18,
            4.21217798e-19,
        )
    )
    result = SCFcache(chi, chi_s, pdi, sigma, 0, navgsegments, cache=cache)
    check(result, data, atol=1e-12, rtol=1e-6)

    # check that the cache is holding items
    assert cache

    # check that cache is reordered on hits and misses
    if flag:
        cache_keys = list(cache)
        oldest_key = cache_keys[0]
        newest_key = cache_keys[-1]
        SCFcache(0, 0, 1, 0.1, 0.1, 50, cache=cache)
        assert oldest_key == list(cache)[-1]
        SCFcache(chi, chi_s, pdi + 0.1, sigma, 0, navgsegments, cache=cache)
        assert newest_key == list(cache)[-2]


long_profile = np.array(
    (
        4.99203946e-01,
        4.87932148e-01,
        4.76660349e-01,
        4.65388551e-01,
        4.56475810e-01,
        4.50106897e-01,
        4.43737984e-01,
        4.37369071e-01,
        4.34513025e-01,
        4.31794550e-01,
        4.29076075e-01,
        4.26597033e-01,
        4.24418464e-01,
        4.22239895e-01,
        4.20061327e-01,
        4.17987099e-01,
        4.15921376e-01,
        4.13855654e-01,
        4.11803019e-01,
        4.09769548e-01,
        4.07736077e-01,
        4.05702606e-01,
        4.03686485e-01,
        4.01672575e-01,
        3.99658666e-01,
        3.97651080e-01,
        3.95654348e-01,
        3.93657617e-01,
        3.91660886e-01,
        3.89677371e-01,
        3.87696201e-01,
        3.85715032e-01,
        3.83738362e-01,
        3.81770809e-01,
        3.79803255e-01,
        3.77835702e-01,
        3.75877509e-01,
        3.73921489e-01,
        3.71965468e-01,
        3.70012240e-01,
        3.68065757e-01,
        3.66119275e-01,
        3.64172792e-01,
        3.62232304e-01,
        3.60293566e-01,
        3.58354829e-01,
        3.56417670e-01,
        3.54485121e-01,
        3.52552573e-01,
        3.50620025e-01,
        3.48691057e-01,
        3.46763371e-01,
        3.44835686e-01,
        3.42908815e-01,
        3.40984872e-01,
        3.39060929e-01,
        3.37136987e-01,
        3.35214998e-01,
        3.33293853e-01,
        3.31372707e-01,
        3.29451921e-01,
        3.27532772e-01,
        3.25613624e-01,
        3.23694476e-01,
        3.21776198e-01,
        3.19858366e-01,
        3.17940535e-01,
        3.16022807e-01,
        3.14105708e-01,
        3.12188609e-01,
        3.10271510e-01,
        3.08354551e-01,
        3.06437678e-01,
        3.04520804e-01,
        3.02603908e-01,
        3.00686816e-01,
        2.98769724e-01,
        2.96852632e-01,
        2.94935180e-01,
        2.93017475e-01,
        2.91099769e-01,
        2.89181999e-01,
        2.87263324e-01,
        2.85344650e-01,
        2.83425976e-01,
        2.81506594e-01,
        2.79586627e-01,
        2.77666661e-01,
        2.75746648e-01,
        2.73825092e-01,
        2.71903535e-01,
        2.69981979e-01,
        2.68059469e-01,
        2.66136044e-01,
        2.64212620e-01,
        2.62289195e-01,
        2.60363659e-01,
        2.58438104e-01,
        2.56512549e-01,
        2.54585870e-01,
        2.52657935e-01,
        2.50730001e-01,
        2.48802066e-01,
        2.46871633e-01,
        2.44941078e-01,
        2.43010523e-01,
        2.41078727e-01,
        2.39145317e-01,
        2.37211908e-01,
        2.35278498e-01,
        2.33342262e-01,
        2.31405766e-01,
        2.29469270e-01,
        2.27531456e-01,
        2.25591642e-01,
        2.23651828e-01,
        2.21712014e-01,
        2.19769079e-01,
        2.17825711e-01,
        2.15882343e-01,
        2.13937610e-01,
        2.11990444e-01,
        2.10043278e-01,
        2.08096112e-01,
        2.06145537e-01,
        2.04194316e-01,
        2.02243095e-01,
        2.00290480e-01,
        1.98334929e-01,
        1.96379377e-01,
        1.94423825e-01,
        1.92464556e-01,
        1.90504375e-01,
        1.88544193e-01,
        1.86582604e-01,
        1.84617466e-01,
        1.82652327e-01,
        1.80687188e-01,
        1.78717981e-01,
        1.76747525e-01,
        1.74777070e-01,
        1.72805208e-01,
        1.70829044e-01,
        1.68852880e-01,
        1.66876715e-01,
        1.64896097e-01,
        1.62913810e-01,
        1.60931522e-01,
        1.58947870e-01,
        1.56959041e-01,
        1.54970213e-01,
        1.52981384e-01,
        1.50987780e-01,
        1.48992029e-01,
        1.46996278e-01,
        1.44999297e-01,
        1.42996350e-01,
        1.40993402e-01,
        1.38990455e-01,
        1.36982777e-01,
        1.34972575e-01,
        1.32962373e-01,
        1.30951247e-01,
        1.28934109e-01,
        1.26916971e-01,
        1.24899833e-01,
        1.22878996e-01,
        1.20855836e-01,
        1.18832677e-01,
        1.16809113e-01,
        1.14781719e-01,
        1.12754326e-01,
        1.10726932e-01,
        1.08698820e-01,
        1.06670180e-01,
        1.04641540e-01,
        1.02613090e-01,
        1.00587736e-01,
        9.85623824e-02,
        9.65370284e-02,
        9.45168915e-02,
        9.25012166e-02,
        9.04855417e-02,
        8.84702329e-02,
        8.64727131e-02,
        8.44751933e-02,
        8.24776735e-02,
        8.04945754e-02,
        7.85258229e-02,
        7.65570704e-02,
        7.45883179e-02,
        7.26601760e-02,
        7.07327583e-02,
        6.88053406e-02,
        6.69036099e-02,
        6.50315956e-02,
        6.31595812e-02,
        6.12875669e-02,
        5.94819282e-02,
        5.76801679e-02,
        5.58784076e-02,
        5.41128387e-02,
        5.23960446e-02,
        5.06792504e-02,
        4.89624563e-02,
        4.73350402e-02,
        4.57167769e-02,
        4.40985136e-02,
        4.25229565e-02,
        4.10146858e-02,
        3.95064151e-02,
        3.79981444e-02,
        3.65929745e-02,
        3.52032893e-02,
        3.38136042e-02,
        3.24673327e-02,
        3.12014820e-02,
        2.99356313e-02,
        2.86697807e-02,
        2.75083943e-02,
        2.63681416e-02,
        2.52278890e-02,
        2.41264512e-02,
        2.31102502e-02,
        2.20940493e-02,
        2.10778484e-02,
        2.01566340e-02,
        1.92600559e-02,
        1.83634779e-02,
        1.74979703e-02,
        1.67142910e-02,
        1.59306116e-02,
        1.51469323e-02,
        1.44423169e-02,
        1.37631693e-02,
        1.30840217e-02,
        1.24274763e-02,
        1.18434877e-02,
        1.12594992e-02,
        1.06755107e-02,
        1.01528583e-02,
        9.65421558e-03,
        9.15557287e-03,
        8.67202826e-03,
        8.24893849e-03,
        7.82584872e-03,
        7.40275895e-03,
        7.02470156e-03,
        6.66773944e-03,
        6.31077731e-03,
        5.96310773e-03,
        5.66345432e-03,
        5.36380091e-03,
        5.06414751e-03,
        4.79617121e-03,
        4.54575895e-03,
        4.29534668e-03,
        4.05016120e-03,
        3.84174364e-03,
        3.63332609e-03,
        3.42490853e-03,
        3.23804064e-03,
        3.06520592e-03,
        2.89237119e-03,
        2.72213799e-03,
        2.57928277e-03,
        2.43642755e-03,
        2.29357232e-03,
        2.16499116e-03,
        2.04726925e-03,
        1.92954735e-03,
        1.81285529e-03,
        1.71611176e-03,
        1.61936824e-03,
        1.52262471e-03,
        1.43512995e-03,
        1.35582876e-03,
        1.27652757e-03,
        1.19739120e-03,
        1.13254192e-03,
        1.06769265e-03,
        1.00284337e-03,
        9.43873618e-04,
        8.90960967e-04,
        8.38048316e-04,
        7.85135665e-04,
        7.41795585e-04,
        6.98713871e-04,
        6.55632157e-04,
        6.16223759e-04,
        5.81217466e-04,
        5.46211173e-04,
        5.11204880e-04,
        4.82392500e-04,
        4.54003402e-04,
        4.25614303e-04,
        3.99482154e-04,
        3.76502936e-04,
        3.53523719e-04,
        3.30544502e-04,
        3.11529931e-04,
        2.92963981e-04,
        2.74398031e-04,
        2.57195570e-04,
        2.42222434e-04,
        2.27249299e-04,
        2.12276164e-04,
        1.99815365e-04,
        1.87761307e-04,
        1.75707250e-04,
        1.64462316e-04,
        1.54775376e-04,
        1.45088436e-04,
        1.35401496e-04,
        1.27291314e-04,
        1.19520299e-04,
        1.11749283e-04,
        1.04449028e-04,
        9.82258916e-05,
        9.20027553e-05,
        8.57796190e-05,
        8.05367327e-05,
        7.55618626e-05,
        7.05869925e-05,
        6.58798583e-05,
        6.19098283e-05,
        5.79397983e-05,
        5.39697682e-05,
        5.06033840e-05,
        4.74407954e-05,
        4.42782067e-05,
        4.12637785e-05,
        3.87488568e-05,
        3.62339351e-05,
        3.37190134e-05,
        3.15722436e-05,
        2.95759061e-05,
        2.75795685e-05,
        2.56624290e-05,
        2.40805795e-05,
        2.24987299e-05,
        2.09168803e-05,
        1.95573337e-05,
        1.83061781e-05,
        1.70550226e-05,
        1.58442642e-05,
        1.48564737e-05,
        1.38686832e-05,
        1.28808926e-05,
        1.20259528e-05,
    )
)


def SCFprofile_test():
    # basically checking that numpy interp hasn't changed
    data = long_profile.copy()
    result = SCFprofile(
        np.linspace(0, 100, 350), chi=0.5, chi_s=0.3, h_dry=15, l_lat=1, mn=200, m_lat=1, pdi=1.5, disp=False
    )
    check(result, data)


PS = Material(formula="C8H8", name="PS", density=1.299)
CHEXd = Material(formula="C6D12", name="cyclohexane-d12", density=0.893)


def EndTetheredPolymer_test():
    # check that the profile doesn't change when filtered thru the class
    etp = EndTetheredPolymer(
        thickness=100,
        interface=0,
        name="EndTetheredPolymer",
        polymer=PS,
        solvent=CHEXd,
        chi=0.5,
        chi_s=0.3,
        h_dry=15,
        l_lat=1,
        mn=200,
        m_lat=1,
        pdi=1.5,
    )
    data = long_profile.copy()
    result = etp.profile(np.linspace(0, 100, 350))
    check(result, data)


def PolymerMushroom_test():
    shroom = PolymerMushroom(
        thickness=50, interface=0, name="shroom", polymer=PS, solvent=CHEXd, sigma=5, vf=0.1, delta=0.1
    )
    data = np.array(
        (
            0.09894842,
            0.09894842,
            0.0989482,
            0.09894772,
            0.09894693,
            0.09894578,
            0.0989442,
            0.09894212,
            0.09893947,
            0.09893613,
            0.09893201,
            0.09892699,
            0.09892093,
            0.09891368,
            0.09890507,
            0.09889491,
            0.09888299,
            0.09886909,
            0.09885293,
            0.09883426,
            0.09881276,
            0.09878811,
            0.09875996,
            0.09872791,
            0.09869156,
            0.09865047,
            0.09860418,
            0.09855219,
            0.09849398,
            0.09842901,
            0.09835672,
            0.09827651,
            0.09818778,
            0.0980899,
            0.09798224,
            0.09786415,
            0.09773497,
            0.09759405,
            0.09744074,
            0.09727438,
            0.09709435,
            0.09690002,
            0.09669079,
            0.0964661,
            0.0962254,
            0.0959682,
            0.09569402,
            0.09540245,
            0.09509312,
            0.09476571,
            0.09441997,
            0.0940557,
            0.09367274,
            0.09327103,
            0.09285056,
            0.09241136,
            0.09195357,
            0.09147735,
            0.09098295,
            0.09047067,
            0.08994086,
            0.08939394,
            0.08883037,
            0.08825066,
            0.08765538,
            0.0870451,
            0.08642047,
            0.08578213,
            0.08513076,
            0.08446708,
            0.08379178,
            0.08310561,
            0.08240928,
            0.08170353,
            0.08098909,
            0.08026668,
            0.079537,
            0.07880076,
            0.07805863,
            0.07731127,
            0.07655932,
            0.0758034,
            0.07504409,
            0.07428197,
            0.07351757,
            0.07275141,
            0.07198396,
            0.07121569,
            0.07044704,
            0.0696784,
            0.06891016,
            0.06814268,
            0.06737629,
            0.0666113,
            0.06584801,
            0.06508668,
            0.06432757,
            0.0635709,
            0.06281691,
            0.06206579,
            0.06131772,
            0.06057289,
            0.05983147,
            0.05909359,
            0.0583594,
            0.05762905,
            0.05690264,
            0.05618048,
            0.05546266,
            0.05474925,
            0.05404033,
            0.05333596,
            0.05263623,
            0.0519412,
            0.05125093,
            0.05056549,
            0.04988494,
            0.04920934,
            0.04853875,
            0.04787322,
            0.04721281,
            0.04655756,
            0.04590752,
            0.04526274,
            0.04462325,
            0.04398911,
            0.04336035,
            0.04273701,
            0.04211911,
            0.04150669,
            0.04089979,
            0.04029843,
            0.03970263,
            0.03911242,
            0.03852782,
            0.03794884,
            0.03737551,
            0.03680785,
            0.03624585,
            0.03568955,
            0.03513893,
            0.03459402,
            0.03405482,
            0.03352133,
            0.03299356,
            0.0324715,
            0.03195515,
            0.03144451,
            0.03093958,
            0.03044034,
            0.0299468,
            0.02945894,
            0.02897675,
            0.02850022,
            0.02802933,
            0.02756407,
            0.02710443,
            0.02665038,
            0.0262019,
            0.02575898,
            0.0253216,
            0.02488972,
            0.02446333,
            0.02404241,
            0.02362691,
            0.02321683,
            0.02281212,
            0.02241277,
            0.02201873,
            0.02162999,
            0.0212465,
            0.02086824,
            0.02049516,
            0.02012725,
            0.01976445,
            0.01940674,
            0.01905408,
            0.01870643,
            0.01836375,
            0.01802601,
            0.01769316,
            0.01736518,
            0.01704201,
            0.01672361,
            0.01640995,
            0.01610099,
            0.01579668,
            0.01549698,
            0.01520184,
            0.01491123,
            0.01462511,
            0.01434342,
            0.01406613,
            0.01379319,
            0.01352456,
            0.0132602,
            0.01300005,
            0.01274408,
            0.01249223,
            0.01224448,
            0.01200076,
            0.01176105,
            0.01152528,
            0.01129342,
            0.01106542,
            0.01084124,
            0.01062083,
            0.01040415,
            0.01019116,
            0.0099818,
            0.00977603,
            0.00957382,
            0.00937511,
            0.00917986,
            0.00898803,
            0.00879957,
            0.00861444,
            0.0084326,
            0.008254,
            0.0080786,
            0.00790636,
            0.00773723,
            0.00757118,
            0.00740815,
            0.00724811,
            0.00709102,
            0.00693683,
            0.0067855,
            0.006637,
            0.00649128,
            0.00634829,
            0.00620801,
            0.0060704,
            0.0059354,
            0.00580299,
            0.00567312,
            0.00554575,
            0.00542086,
            0.00529839,
            0.00517831,
            0.00506059,
            0.00494519,
            0.00483207,
            0.0047212,
            0.00461253,
            0.00450604,
            0.00440169,
            0.00429944,
            0.00419926,
            0.00410112,
            0.00400499,
            0.00391082,
            0.00381858,
            0.00372826,
            0.0036398,
            0.00355318,
            0.00346837,
            0.00338534,
            0.00330406,
            0.00322449,
            0.0031466,
            0.00307038,
            0.00299578,
            0.00292278,
            0.00285135,
            0.00278146,
            0.00271309,
            0.0026462,
            0.00258077,
            0.00251678,
            0.00245419,
            0.00239298,
            0.00233313,
            0.0022746,
            0.00221738,
            0.00216145,
            0.00210676,
            0.00205331,
            0.00200107,
            0.00195001,
            0.00190011,
            0.00185136,
            0.00180372,
            0.00175717,
            0.00171171,
            0.00166729,
            0.00162391,
            0.00158153,
            0.00154015,
            0.00149974,
            0.00146028,
            0.00142175,
            0.00138414,
            0.00134742,
            0.00131158,
            0.00127659,
            0.00124245,
            0.00120913,
            0.00117661,
            0.00114489,
            0.00111394,
            0.00108375,
            0.00105431,
            0.00102559,
            0.00099758,
            0.00097028,
            0.00094365,
            0.0009177,
            0.0008924,
            0.00086775,
            0.00084373,
            0.00082033,
            0.00079753,
            0.00077533,
            0.00075372,
            0.00073268,
            0.0007122,
            0.00069227,
            0.00067289,
            0.00065404,
            0.00063572,
            0.00061791,
            0.00060062,
            0.00058382,
            0.00056752,
            0.00055171,
            0.00053637,
            0.00052152,
            0.00050713,
            0.0004932,
            0.00047972,
            0.0004667,
            0.00045413,
            0.00044199,
            0.00043029,
            0.00041902,
            0.00040817,
            0.00039774,
            0.00038773,
            0.00037812,
            0.00036892,
            0.00036011,
            0.00035169,
            0.00034366,
            0.000336,
            0.00032871,
            0.00032179,
            0.00031522,
            0.000309,
            0.00030311,
        )
    )
    result = shroom.profile(np.linspace(0, 100, 350))
    check(result, data, rtol=2e-5)


def PolymerBrush_test():
    brush = PolymerBrush(
        thickness=60,
        interface=0,
        name="brush",
        polymer=PS,
        solvent=CHEXd,
        base_vf=0.5,
        base=10,
        length=40,
        power=0.5,
        sigma=5,
    )
    data = np.array(
        (
            4.99986443e-03,
            4.99978536e-03,
            4.99967203e-03,
            4.99951328e-03,
            4.99929528e-03,
            4.99900114e-03,
            4.99861052e-03,
            4.99809931e-03,
            4.99743931e-03,
            4.99659808e-03,
            4.99553878e-03,
            4.99422025e-03,
            4.99259710e-03,
            4.99062003e-03,
            4.98823628e-03,
            4.98539014e-03,
            4.98202365e-03,
            4.97807733e-03,
            4.97349094e-03,
            4.96820435e-03,
            4.96215823e-03,
            4.95529482e-03,
            4.94755852e-03,
            4.93889640e-03,
            4.92925855e-03,
            4.91859831e-03,
            4.90687235e-03,
            4.89404058e-03,
            4.88006602e-03,
            4.86491448e-03,
            4.84855421e-03,
            4.83095548e-03,
            4.81209016e-03,
            4.79193119e-03,
            4.77045217e-03,
            4.74762687e-03,
            4.72342877e-03,
            4.69783069e-03,
            4.67080435e-03,
            4.64232002e-03,
            4.61234611e-03,
            4.58084886e-03,
            4.54779205e-03,
            4.51313688e-03,
            4.47684104e-03,
            4.43885832e-03,
            4.39913807e-03,
            4.35762465e-03,
            4.31425670e-03,
            4.26896628e-03,
            4.22167774e-03,
            4.17230634e-03,
            4.12075632e-03,
            4.06691830e-03,
            4.01066537e-03,
            3.95184669e-03,
            3.89027477e-03,
            3.82568764e-03,
            3.75764547e-03,
            3.68624879e-03,
            3.61125607e-03,
            3.53240819e-03,
            3.44943283e-03,
            3.36205142e-03,
            3.26998883e-03,
            3.17298625e-03,
            3.07081709e-03,
            2.96330578e-03,
            2.85034890e-03,
            2.73193754e-03,
            2.60817972e-03,
            2.47932112e-03,
            2.34576230e-03,
            2.20807039e-03,
            2.06698354e-03,
            1.92340656e-03,
            1.77839675e-03,
            1.63313981e-03,
            1.48891620e-03,
            1.34705964e-03,
            1.20890977e-03,
            1.07576197e-03,
            9.48817631e-04,
            8.29138101e-04,
            7.17605690e-04,
            6.14894103e-04,
            5.21450276e-04,
            4.37488408e-04,
            3.62996087e-04,
            2.97751420e-04,
            2.41349271e-04,
            1.93234187e-04,
            1.52737250e-04,
            1.19114105e-04,
            9.15816535e-05,
            6.93513001e-05,
            5.16572477e-05,
            3.77789065e-05,
            2.70571017e-05,
        )
    )
    result = brush.profile(np.linspace(0, 60, 99))
    check(result, data)


if __name__ == "__main__":
    calc_g_zs_ta_test()
    calc_g_zs_ngts_u_test()
    calc_g_zs_ngts_test()
    calc_g_zs_free_test()
    SZdist_test()
    SCFeqns_test()
    SCFsolve_test()
    # SCFcache_test()
    SCFprofile_test()
    EndTetheredPolymer_test()
    PolymerMushroom_test()
    PolymerBrush_test()
